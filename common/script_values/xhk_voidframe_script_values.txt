
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

xhk_voidframe_storage_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_storage_xhk
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_storage_dm
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_storage_de
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_storage_pe
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_storage_se
		}
		mode = add
	}

	multiply = value:xhk_voidframe_storage_upgrade_level
}


xhk_voidframe_storage_upgrade_level = {
	base = 0

	modifier = {
		add = 0.5
		has_deposit = xhk_voidframe_storage_kugel_norm
	}

	modifier = {
		add = 1
		has_deposit = xhk_voidframe_storage_kugel_mega
	}

	modifier = {
		add = 2
		has_deposit = xhk_voidframe_storage_kugel_tera
	}

	add = 1
}


xhk_voidframe_astral_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_astral_xhk
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_astral_xhk_dm
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_astral_xhk_de
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_astral_xhk_pe
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_astral_xhk_se
		}
		mode = add
	}
}

xhk_voidframe_mbrain_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_mbrain_xhk
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_mbrain_xhk_dm
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_mbrain_xhk_de
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_mbrain_xhk_pe
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_mbrain_xhk_se
		}
		mode = add
	}
}

xhk_voidframe_research_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_science
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_science_dm
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_science_de
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_science_pe
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_voidframe_science_se
		}
		mode = add
	}
}
