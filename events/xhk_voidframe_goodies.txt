namespace = xhk_voidframe_goodies

## STORAGE CALCULATION
##############################################################################

#recalculating storage, limits are added for processor efficiency
#fires on_district_complete / on_district_destroy
planet_event = {
	id = xhk_voidframe_goodies.1
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_owner = yes
	}
	immediate = {
		if = {
			limit = {
				owner = {
					giga_has_frameworld_origin = yes
				}
			}
			owner = {
				recalculate_frameworld_storage = yes
				recalculate_frameworld_mbrain = yes
			}
		}
	}
}

#fires on monthly pulse
country_event = {
	id = xhk_voidframe_goodies.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				giga_has_frameworld_origin = yes
			}
			recalculate_frameworld_storage = yes
			recalculate_frameworld_mbrain = yes
		}
	}
}

## GIVING SPECIFIC TECHS
##############################################################################

#giving techs that are locked behind num planets:
# resort / thrall world
# planetary wonders stuff
country_event = {
	id = xhk_voidframe_goodies.300
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		giga_has_frameworld_origin = yes
	}
	
	immediate = {
		# give resort tech option because it needs >1 colony
		if = { 
			limit = {
				# if we don't already have it, or have it available
				nor = { 
					has_technology = tech_resort_colonies
					has_tech_option = tech_resort_colonies
				}
				# but we do have the prerequisities
				has_technology = tech_artificial_moral_codes
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 2 value >= 5 }
			}
			add_research_option = tech_resort_colonies
		}
		
		# give thrall world option
		if = { 
			limit = {
				# if we don't already have it, or have it available
				nor = { 
					has_technology = tech_slave_colonies
					has_tech_option = tech_slave_colonies
				}
				# but we do have the prerequisities
				has_technology = tech_neural_implants
				allows_slavery = yes
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 2 value >= 5 }
			}
			add_research_option = tech_slave_colonies
		}

		# give penal world option
		if = { 
			limit = {
				# if we don't already have it, or have it available
				nor = { 
					has_technology = tech_penal_colonies
					has_tech_option = tech_penal_colonies
				}
				# but we do have the prerequisities
				has_technology = tech_artificial_moral_codes
				is_gestalt = no
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 2 value >= 5 }
			}
			add_research_option = tech_penal_colonies
		}		

		# planetary wonders galactic model
		if = { 
			limit = {
				has_planetary_wonders = yes

				# if we don't already have it, or have it available
				nor = { 
					has_technology = pw_tech_galactic_modeling
					has_tech_option = pw_tech_galactic_modeling
				}
				# but we do have the prerequisities
				has_technology = pw_tech_planetary_mega_engineering
				has_technology = tech_galactic_bureaucracy
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 4 value >= 5 }
			}
			add_research_option = pw_tech_galactic_modeling
		}

		# planetary wonders galactic model expand (not gestalt)
		if = { 
			limit = {
				has_planetary_wonders = yes

				# if we don't already have it, or have it available
				nor = { 
					has_technology = pw_tech_galactic_model_expanding_bureaucracy
					has_tech_option = pw_tech_galactic_model_expanding_bureaucracy
				}
				# but we do have the prerequisities
				is_gestalt = no
				has_technology = pw_tech_galactic_modeling
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 4 value >= 5 }
			}
			add_research_option = pw_tech_galactic_model_expanding_bureaucracy
		}

		# planetary wonders galactic model expand (hive)
		if = { 
			limit = {
				has_planetary_wonders = yes

				# if we don't already have it, or have it available
				nor = { 
					has_technology = pw_tech_galactic_model_expanding_bureaucracy_hive
					has_tech_option = pw_tech_galactic_model_expanding_bureaucracy_hive
				}
				# but we do have the prerequisities
				is_hive_empire = yes
				has_technology = pw_tech_galactic_modeling
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 4 value >= 5 }
			}
			add_research_option = pw_tech_galactic_model_expanding_bureaucracy_hive
		}

		# planetary wonders galactic model expand (machine gest)
		if = { 
			limit = {
				has_planetary_wonders = yes

				# if we don't already have it, or have it available
				nor = { 
					has_technology = pw_tech_galactic_model_expanding_bureaucracy_machine
					has_tech_option = pw_tech_galactic_model_expanding_bureaucracy_machine
				}
				# but we do have the prerequisities
				is_machine_empire = yes
				has_technology = pw_tech_galactic_modeling
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 4 value >= 5 }
			}
			add_research_option = pw_tech_galactic_model_expanding_bureaucracy_machine
		}

		# planetary wonders panopticon
		if = { 
			limit = {
				has_planetary_wonders = yes

				# if we don't already have it, or have it available
				nor = { 
					has_technology = pw_tech_utilitarian_vigilance
					has_tech_option = pw_tech_utilitarian_vigilance
				}
				# but we do have the prerequisities
				NOT = {
					is_criminal_syndicate = yes
				}
				has_technology = pw_tech_planetary_mega_engineering
				has_technology = tech_penal_colonies
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 3 value >= 5 }
			}
			add_research_option = pw_tech_utilitarian_vigilance
		}

		# planetary wonders nostalgia paradise
		if = { 
			limit = {
				has_planetary_wonders = yes

				# if we don't already have it, or have it available
				nor = { 
					has_technology = pw_tech_augmented_reality_resorts
					has_tech_option = pw_tech_augmented_reality_resorts
				}
				# but we do have the prerequisities
				has_technology = pw_tech_planetary_mega_engineering
				OR = {
					has_technology = tech_resort_colonies
					has_valid_civic = civic_machine_servitor
				}
				# and some other techs of the tier below
				num_researched_techs_of_tier = { tier = 3 value >= 5 }
			}
			add_research_option = pw_tech_augmented_reality_resorts
		}
	}
}

## ADDING DEPOSITS
##############################################################################

#adding deposits (tech trigger)
country_event = {
	id = xhk_voidframe_goodies.301
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		giga_has_frameworld_origin = yes
		any_owned_planet = {
			giga_is_frame_world = yes
		}
	}
	
	immediate = {
		# add deposit for embassy
		if = { 
			limit = {
				# if we have either prereq tech
				or = {
					has_technology = tech_embodied_dynamism
					has_technology = tech_collective_self
				}
				capital_scope = {
					NOT = { has_deposit = xhk_voidframe_embassy }
				}
			}
			capital_scope = {
				add_deposit = xhk_voidframe_embassy
			}
		}

		# add deposit for knights
		if = {
			limit = {
				has_country_flag = decision_toxic_knights
				has_technology = tech_global_defense_grid
				capital_scope = {
					NOT = { has_deposit = xhk_voidframe_knights }
				}
			}	
			capital_scope = {
				add_deposit = xhk_voidframe_knights
			}
		}
	}
}

#adding deposits (tradition trigger)
country_event = {
	id = xhk_voidframe_goodies.302
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		giga_has_frameworld_origin = yes
		any_owned_planet = {
			giga_is_frame_world = yes
		}
	}
	
	immediate = {
		# add deposit for nanotech
		# if = { 
		# 	limit = {
		# 		# if we have tradition, and nanite expansion is NOT loaded
		# 		has_tradition = tr_nanotech_1
		# 		capital_scope = {
		# 			NOT = { has_deposit = xhk_voidframe_nanite_dep }
		# 		}
		# 		NOT = { has_global_flag = nanite_expansion_active }
		# 	}
		# 	capital_scope = {
		# 		add_deposit = xhk_voidframe_nanite_dep
		# 	}
		# }
	}
}

#adding deposits (ascension trigger)
country_event = {
	id = xhk_voidframe_goodies.303
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		giga_has_frameworld_origin = yes
		any_owned_planet = {
			giga_is_frame_world = yes
		}
	}
	
	immediate = {
		# add deposit for nanotech
		# if = { 
		# 	limit = {
		# 		# if we have perk, and nanite expansion is NOT loaded
		# 		has_ascension_perk = ap_master_builders
		# 		capital_scope = {
		# 			NOT = { has_deposit = xhk_voidframe_nanite_dep }
		# 		}
		# 		NOT = { has_global_flag = nanite_expansion_active }
		# 	}
		# 	capital_scope = {
		# 		add_deposit = xhk_voidframe_nanite_dep
		# 	}
		# }
	}
}

## AQUATIC FRAME
##############################################################################
country_event = {
	id = xhk_voidframe_goodies.600
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		giga_has_frameworld_origin = yes
		OR = {
			has_civic = civic_corporate_machine_anglers_xhk_voidframe
			has_civic = civic_corporate_anglers_xhk_voidframe
			has_civic = civic_machine_anglers_xhk_voidframe
			has_civic = civic_anglers_xhk_voidframe
		}
	}
	
	immediate = {
		## CIVIC SWAP
		if = {
			limit = {
				has_civic = civic_corporate_machine_anglers_xhk_voidframe
			}
			force_remove_civic = civic_corporate_machine_anglers_xhk_voidframe
			force_add_civic = civic_corporate_machine_anglers
		}
		if = {
			limit = {
				has_civic = civic_corporate_anglers_xhk_voidframe
			}
			force_remove_civic = civic_corporate_anglers_xhk_voidframe
			force_add_civic = civic_corporate_anglers
		}
		if = {
			limit = {
				has_civic = civic_machine_anglers_xhk_voidframe
			}
			force_remove_civic = civic_machine_anglers_xhk_voidframe
			force_add_civic = civic_machine_anglers
		}
		if = {
			limit = {
				has_civic = civic_anglers_xhk_voidframe
			}
			force_remove_civic = civic_anglers_xhk_voidframe
			force_add_civic = civic_anglers
		}

		## TRAIT SWAP
		every_owned_pop = {
			limit = {
				is_sapient = yes
			}
			if = {
				limit = {
					has_trait = trait_robot_aquatic_xhk_dummy
				}
				modify_species = {
					species = this
					remove_trait = trait_robot_aquatic_xhk_dummy
					add_trait = trait_robot_aquatic
				}
			}
			if = {
				limit = {
					has_trait = trait_aquatic_xhk_dummy
				}
				modify_species = {
					species = this
					remove_trait = trait_aquatic_xhk_dummy
					add_trait = trait_aquatic
				}
			}
		}
		capital_scope = {
			add_modifier = { modifier = flooded_habitat days = -1}
		}
	}
}

### LATHE EVENTS
##############################################################################

# event that calls the others

country_event = {
	id = xhk_voidframe_goodies.700
	title = "xhk_voidframe_goodies.700.name"
	desc = "xhk_voidframe_goodies.700.desc"
	is_triggered_only = yes
	hide_window = no
	show_sound = event_machinery
	location = capital_scope
	picture = GFX_evt_synaptic_lathe
	
	trigger = {
		giga_has_frameworld_origin = yes
		capital_scope = {
			has_planet_flag = xhk_voidframe_latheframe
		}
	}
	
	# yeah all the variables except alloys (country) are planet scope, deal with it
	immediate = {
		set_variable = {
			which = xhk_voidframe_alloy_num
			value = 0
		}
		export_resource_stockpile_to_variable = {
			resource = alloys
			variable = xhk_voidframe_alloy_num
		}
		set_country_flag = xhk_voidframe_editing_lathe
	}

	# reactor / stabilizer
	option = {
		name = "xhk_voidframe_goodies.700.a"
		allow = {
			always = yes
		}
		hidden_effect = {
			country_event = { id = xhk_voidframe_goodies.701 }
		}
	}

	# cognitator / overlocker / preserver
	option = {
		name = "xhk_voidframe_goodies.700.b"
		allow = {
			OR = {
				has_technology = tech_lathe_cogitator
				has_technology = tech_lathe_overclocker
				has_technology = tech_lathe_preserver
			}
		}
		hidden_effect = {
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}

	# resonator / sustainer / validator
	option = {
		name = "xhk_voidframe_goodies.700.c"
		allow = {
			OR = {
				has_technology = tech_lathe_life_support
				has_technology = tech_lathe_resonator
				has_technology = tech_lathe_validator
			}
		}
		hidden_effect = {
			country_event = { id = xhk_voidframe_goodies.703 }
		}
	}
	
	option = {
		name = "xhk_voidframe_goodies.700.d"
		hidden_effect = {
			remove_country_flag = xhk_voidframe_editing_lathe
		}
	}
}

# reactor / stabilizer
country_event = {
	id = xhk_voidframe_goodies.701
	title = "xhk_voidframe_goodies.701.name"
	desc = "xhk_voidframe_goodies.701.desc"
	is_triggered_only = yes
	hide_window = no
	show_sound = event_machinery
	location = capital_scope
	picture = GFX_evt_synaptic_lathe
	
	trigger = {
		giga_has_frameworld_origin = yes
		capital_scope = {
			has_planet_flag = xhk_voidframe_latheframe
		}
	}
	
	# yeah all the variables except alloys (country) are planet scope, deal with it
	immediate = {
		set_variable = {
			which = xhk_voidframe_alloy_num
			value = 0
		}
		export_resource_stockpile_to_variable = {
			resource = alloys
			variable = xhk_voidframe_alloy_num
		}
	}

	# reactor
	option = {
		name = "xhk_voidframe_goodies.701.upgrade_a"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_reactor_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_reactor_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.701 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.701.downgrade_a"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_reactor_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_reactor_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.701 }
		}
	}
	
	# stabilizer
	option = {
		name = "xhk_voidframe_goodies.701.upgrade_b"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_stabilizer_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_stabilizer_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.701 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.701.downgrade_b"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_stabilizer_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_stabilizer_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.701 }
		}
	}

	option = {
		name = "xhk_voidframe_goodies.701.return"
		hidden_effect = {
			country_event = { id = xhk_voidframe_goodies.700 }
		}
	}
}

# cognitator / overlocker / preserver
country_event = {
	id = xhk_voidframe_goodies.702
	title = "xhk_voidframe_goodies.702.name"
	desc = "xhk_voidframe_goodies.702.desc"
	is_triggered_only = yes
	hide_window = no
	show_sound = event_machinery
	location = capital_scope
	picture = GFX_evt_synaptic_lathe
	
	trigger = {
		giga_has_frameworld_origin = yes
		capital_scope = {
			has_planet_flag = xhk_voidframe_latheframe
		}
	}
	
	# yeah all the variables except alloys (country) are planet scope, deal with it
	immediate = {
		set_variable = {
			which = xhk_voidframe_alloy_num
			value = 0
		}
		export_resource_stockpile_to_variable = {
			resource = alloys
			variable = xhk_voidframe_alloy_num
		}
	}

	# cognitator
	option = {
		name = "xhk_voidframe_goodies.702.upgrade_a"
		allow = {
			has_technology = tech_lathe_cogitator
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_cogitator_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_cogitator_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.702.downgrade_a"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_cogitator_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_cogitator_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}
	
	# overlocker
	option = {
		name = "xhk_voidframe_goodies.702.upgrade_b"
		allow = {
			has_technology = tech_lathe_overclocker
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_overclocker_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_overclocker_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.702.downgrade_b"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_overclocker_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_overclocker_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}

	# preserver
	option = {
		name = "xhk_voidframe_goodies.702.upgrade_c"
		allow = {
			has_technology = tech_lathe_preserver
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_preserver_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_preserver_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.702.downgrade_c"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_preserver_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_preserver_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}

	option = {
		name = "xhk_voidframe_goodies.701.return"
		hidden_effect = {
			country_event = { id = xhk_voidframe_goodies.700 }
		}
	}
}

# resonator / sustainer / validator
country_event = {
	id = xhk_voidframe_goodies.703
	title = "xhk_voidframe_goodies.703.name"
	desc = "xhk_voidframe_goodies.703.desc"
	is_triggered_only = yes
	hide_window = no
	show_sound = event_machinery
	location = capital_scope
	picture = GFX_evt_synaptic_lathe
	
	trigger = {
		giga_has_frameworld_origin = yes
		capital_scope = {
			has_planet_flag = xhk_voidframe_latheframe
		}
	}
	
	# yeah all the variables except alloys (country) are planet scope, deal with it
	immediate = {
		set_variable = {
			which = xhk_voidframe_alloy_num
			value = 0
		}
		export_resource_stockpile_to_variable = {
			resource = alloys
			variable = xhk_voidframe_alloy_num
		}
	}

	# resonator
	option = {
		name = "xhk_voidframe_goodies.703.upgrade_a"
		allow = {
			has_technology = tech_lathe_resonator
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_resonator_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_resonator_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.703 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.703.downgrade_a"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_resonator_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_resonator_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.703 }
		}
	}
	
	# sustainer
	option = {
		name = "xhk_voidframe_goodies.703.upgrade_b"
		allow = {
			has_technology = tech_lathe_life_support
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_sustainer_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_sustainer_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.703 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.703.downgrade_b"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_sustainer_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_sustainer_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.703 }
		}
	}

	# validator
	option = {
		name = "xhk_voidframe_goodies.703.upgrade_c"
		allow = {
			has_technology = tech_lathe_validator
			custom_tooltip = {
				fail_text = "xhk_not_enough_framelathe_points"
				hidden_trigger = { #more than 0 upgrade points left
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_free_points
							value > 0
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "xhk_too_many_single_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_validator_num
							value < 2
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = { # over upgraded
					check_variable = {
						which = xhk_voidframe_alloy_num
						value > 2000
					}
				}
			}
		}
		hidden_effect = {
			add_resource = { #subtract the alloys based on that variable
				alloys = -2000
			}
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_validator_num
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.702 }
		}
	}
	option = {
		name = "xhk_voidframe_goodies.703.downgrade_c"
		allow = {
			custom_tooltip = {
				fail_text = "xhk_none_of_this_framelathe_upg"
				hidden_trigger = { # over upgraded
					capital_scope = {
						check_variable = {
							which = xhk_var_latheframe_validator_num
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			capital_scope = {
				change_variable = {
					which = xhk_var_latheframe_free_points
					value = 1
				}
				subtract_variable = {
					which = xhk_var_latheframe_validator_num
					value = 1
				}
			}
			country_event = { id = xhk_voidframe_goodies.703 }
		}
	}

	option = {
		name = "xhk_voidframe_goodies.701.return"
		hidden_effect = {
			country_event = { id = xhk_voidframe_goodies.700 }
		}
	}
}

# documentation maker
country_event = {
	id = xhk_voidframe_goodies.710
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		create_point_of_interest = {
			id = giga_frameworld_docs_chain.11
			name = "giga_frameworld_docs_framelathe"
			desc = "giga_frameworld_docs_framelathe_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}
	}
}

## global flag
##############################################################################
event = {
	id = xhk_voidframe_goodies.999
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		NOT = {
			has_global_flag = xhk_funny_frameworld_exists
		}
	}
	immediate = {
		set_global_flag = xhk_funny_frameworld_exists

		every_playable_country  = {
			limit = { giga_has_frameworld_origin = yes }
			country_event = { id = xhk_voidframe_goodies.600 days = 2 }
		}
	}
}